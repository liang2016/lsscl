package com.lsscl.app.dao.impl;

import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.collections.map.LinkedMap;

import com.lsscl.app.bean.PointsWithin24HMsgBody;
import com.lsscl.app.bean.QC;
import com.lsscl.app.bean.RSP;
import com.lsscl.app.dao.AppDao;
import com.lsscl.app.util.StringUtil;
import com.serotonin.mango.DataTypes;
import com.serotonin.mango.db.dao.DataPointDao;
import com.serotonin.mango.view.text.TextRenderer;
import com.serotonin.mango.vo.DataPointVO;

/**
 * 24小时内点统计
 * 
 * @author yxx
 * 
 */
public class PointsWithin24HDao extends AppDao {

	@Override
	public RSP getRSP(QC qc) {
		String stime = qc.getMsgBody().get("STIME");
		if(stime==null)return null;
		Date now = new Date(Long.parseLong(stime));
		String time = StringUtil.formatDate(now, "yyyy-MM-dd HH:mm:ss");
		long gt = now.getTime();
		long le = gt + 24 * 60 * 60 * 1000;

		RSP rsp = new RSP(qc.getMsgId());
		String pid = qc.getMsgBody().get("PID");
		int pointId = Integer.parseInt(pid);
		DataPointVO pv = new DataPointDao().getDataPoint(pointId);
		TextRenderer tr = pv.getTextRenderer();
		List<Map<String, Object>> rows = ejt.query(
				buildSql(pointId, time, le, gt), new Object[] {},
				new com.serotonin.mango.vo.ResultData());
		Map<Integer, Object> tmp = new HashMap<Integer, Object>();
		String unit = "单位："+tr.getMetaText();// 单位
		if (rows.size() == 0) {
			unit = "没有数据";
		}

		Integer type = 0;
		for (Map<String, Object> point : rows) {
			type = (Integer) point.get("dataType");
			if (type != null) {// 不为空且不为二进制数据
				Object obj = point.get("pointValue");
				tmp.put((Integer) point.get("h"), obj);
			}
		}
		int nHour = now.getHours();
		Map<Integer, Object> map = new LinkedMap();
		if (type == DataTypes.BINARY) {// 二进制数据
			unit = "0:" + tr.getText(false, 2) + ", 1:" + tr.getText(true, 2)
					+ ", -1:无数据";
		}
		for (int i = 0;i<24;i++) {
			Double obj = (Double) tmp.get(i);
			if(obj!=null){
				map.put(i, obj);
			}
		}

		PointsWithin24HMsgBody msgBody = new PointsWithin24HMsgBody();
		msgBody.setTitle("");
		msgBody.setSubTitle(unit);
		msgBody.setPoints(map);
		msgBody.setDataType(type);
		rsp.setMsgBody(msgBody);
		// 生成统计图表
		return rsp;
	}

	private String buildSql(int pointId, String time, long le, long gt) {

		String sql = "select h,dataType,pointValue from(SELECT h, dataType,pointValue,ROW_NUMBER() over (PARTITION by h ORDER BY id) as rn from "
				+ "(SELECT id,dataType,pointValue, "
				+ "DATEDIFF(hh, '" + time 
				+ "', DATEADD(S,cast(ts/1000 as int) + 8 * 3600,'1970-01-01 00:00:00'))h from pointValues_" + pointId
				+ " where ts <= " + le + " and ts > " + gt
				+ ")tt)k where rn=1";
		return sql;
	}
}
